// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

enum EventType {
  concierto
  teatro
  fiesta
  feria
  otros
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  password      String?
  role          Role      @default(user)
  emailVerified DateTime?
  image         String? // Imagen de perfil opcional
  createdAt     DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]

  // Relaciones
  events Event[]
}

model Event {
  id               String   @id @default(uuid())
  eventTitle       String
  eventSlug        String
  eventDescription String
  eventDate        DateTime
  startTime        String // Formato HH:mm

  eventLocationName String
  eventLocation     String
  eventLocationMap  String?
  tags              String[]  @default([]) // Arreglo de strings
  createdAt         DateTime  @default(now())
  ticketPrice       String?
  ticketLink        String?
  eventType         EventType

  // Relaciones

  user   User   @relation(fields: [userId], references: [id])
  userId String

  image EventImage?
}

model EventImage {
  id       String @id @default(uuid())
  url      String
  publicId String

  // Relaciones

  eventId String @unique
  event   Event  @relation(fields: [eventId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  access_token      String? // <--- nuevo
  refresh_token     String?
  expires_at        Int?
  token_type        String?
  id_token          String?
  scope             String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
